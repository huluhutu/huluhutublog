import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,d as p}from"./app.0662e65c.js";const t={},e=p(`<h1 id="java\u96C6\u5408" tabindex="-1"><a class="header-anchor" href="#java\u96C6\u5408" aria-hidden="true">#</a> Java\u96C6\u5408</h1><p><img src="https://raw.githubusercontent.com/huluhutu/blogimg/main/img/image-20221015072405857.png" alt="image-20221015072405857" loading="lazy"></p><h2 id="\u7EBF\u7A0B\u5B89\u5168\u548C\u4E0D\u5B89\u5168\u7684\u5E38\u89C1\u96C6\u5408\u6709\u54EA\u4E9B" tabindex="-1"><a class="header-anchor" href="#\u7EBF\u7A0B\u5B89\u5168\u548C\u4E0D\u5B89\u5168\u7684\u5E38\u89C1\u96C6\u5408\u6709\u54EA\u4E9B" aria-hidden="true">#</a> \u7EBF\u7A0B\u5B89\u5168\u548C\u4E0D\u5B89\u5168\u7684\u5E38\u89C1\u96C6\u5408\u6709\u54EA\u4E9B</h2><p><strong>\u7EBF\u7A0B\u5B89\u5168\u7684\uFF1A</strong></p><ul><li>HashTable\uFF1A\u6BD4HashMap\u591A\u4E2A\u7EBF\u7A0B\u5B89\u5168</li><li>ConcurrentHashMap\uFF1A\u662F\u4E00\u79CD\u9AD8\u6548\u4E14\u7EBF\u7A0B\u5B89\u5168\u7684\u96C6\u5408</li><li>Vector\uFF1A\u5F88\u5C11\u7528\u7684\u5B89\u5168\u6570\u7EC4</li><li>Stack\uFF1A\u7EE7\u627F\u4E0EVector\u5B9E\u73B0\u7684\uFF0C\u5F88\u5C11\u7528</li></ul><p><strong>\u7EBF\u7A0B\u4E0D\u5B89\u5168\u7684\uFF1A</strong></p><ul><li>HashMap</li><li>ArrayList</li><li>LinkedList</li><li>HashSet</li><li>TreeSet</li><li>TreeMap</li></ul><h2 id="arraylist\u548Clinkedlist\u7684\u533A\u522B" tabindex="-1"><a class="header-anchor" href="#arraylist\u548Clinkedlist\u7684\u533A\u522B" aria-hidden="true">#</a> ArrayList\u548CLinkedList\u7684\u533A\u522B</h2><p><img src="https://raw.githubusercontent.com/huluhutu/blogimg/main/img/image-20221015073840337.png" alt="image-20221015073840337" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/huluhutu/blogimg/main/img/image-20221015073713374.png" alt="image-20221015073713374" loading="lazy"></p><ul><li>\u7EBF\u7A0B\u5B89\u5168\u89D2\u5EA6\uFF1A\u90FD\u4E0D\u662F\u7EBF\u7A0B\u5B89\u5168\u7684</li><li>\u6570\u636E\u7ED3\u6784\u89D2\u5EA6\uFF1A\u90FD\u662F\u7EE7\u627FAbstractList\u63A5\u53E3\uFF0C\u4E0D\u540C\u7684\u662FArrayList\u7EE7\u627FRandomAccess\u63A5\u53E3\uFF0CLinkedList\u8FD8\u7EE7\u627F\u4E86Deque\u63A5\u53E3</li><li>\u529F\u80FD\uFF1A <ul><li>ArrayList\u652F\u6301\u968F\u673A\u8BBF\u95EE\uFF0C\u63D2\u5165\u548C\u5220\u9664\u53D7\u4F4D\u7F6E\u5F71\u54CD\uFF0C\u5B58\u50A8\u6570\u91CFsize\u53D7\u9650\u5236\uFF0C\u6EE1\u4E86\u540E\u9700\u8981\u6269\u5BB9</li><li>LinkedList\u652F\u6301\u53CC\u7AEF\u961F\u5217\uFF0C\u63D2\u5165\u5220\u9664\u4E0D\u53D7\u4F4D\u7F6E\u5F71\u54CD\uFF0C\u7406\u8BBA\u65E0\u9650\u5B58\u50A8\uFF0C\u80FD\u591F\u6BD4\u8F83\u597D\u5730\u5229\u7528\u5185\u5B58\u788E\u7247\uFF0C\u76F8\u5BF9ArrayList\u6BD4\u8F83\u6D88\u8017\u5B58\u50A8\u7A7A\u95F4</li></ul></li></ul><h2 id="\u8BE6\u7EC6\u8BF4\u4E00\u4E0Barraylist\u7684\u6269\u5BB9\u673A\u5236" tabindex="-1"><a class="header-anchor" href="#\u8BE6\u7EC6\u8BF4\u4E00\u4E0Barraylist\u7684\u6269\u5BB9\u673A\u5236" aria-hidden="true">#</a> \u8BE6\u7EC6\u8BF4\u4E00\u4E0BArrayList\u7684\u6269\u5BB9\u673A\u5236</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">//\u6DFB\u52A0\u5143\u7D20\u4E4B\u524D\uFF0C\u786E\u8BA4\u5BB9\u91CF</span>
        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!</span>
        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
        <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token function">calculateCapacity</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token comment">//\u8BA1\u7B97\u5BB9\u91CF</span>
 <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateCapacity</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">,</span> <span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">//\u5982\u679CelementData\u662F\u521D\u59CB\u7684\u90A3\u4E2A\u6570\u7EC4\uFF0C\u5219\u9009\u51FA\u9ED8\u8BA4\u5BB9\u91CF\uFF0810\uFF09\u548C\u6700\u5C0F\u5BB9\u91CF\u7684\u6700\u5927\u503C</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData <span class="token operator">==</span> <span class="token constant">DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">,</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> minCapacity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token comment">//modCount\u8FD9\u4E2A\u5B57\u6BB5\u662F\u7528\u4F5Cfail-fast\u7684</span>
<span class="token comment">//\u5982\u679C\u6700\u5C0F\u5BB9\u91CF\u5927\u4E8E\u6570\u7EC4\u7684\u957F\u5EA6\uFF0C\u5C31\u8981\u6269\u5BB9\u4E86</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureExplicitCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modCount<span class="token operator">++</span><span class="token punctuation">;</span>

        <span class="token comment">// overflow-conscious code</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">-</span> elementData<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">grow</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * Increases the capacity to ensure that it can hold at least the
     * number of elements specified by the minimum capacity argument.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">minCapacity</span> the desired minimum capacity
     */</span>
<span class="token comment">//\u65B0\u5BB9\u91CF\u662F\u65E7\u5BB9\u91CF\u76841.5\u500D\uFF08\u4F4D\u8FD0\u7B97\uFF09</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// overflow-conscious code</span>
        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>
        <span class="token comment">//\u5982\u679C\u5927\u4E8E\u6700\u5927\u6570\u7EC4\u957F\u5EA6\u4E14\u5927\u4E8E0\u7684\uFF0C\u5219\u8D4B\u503CInteger.MAX_VALUE</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> <span class="token constant">MAX_ARRAY_SIZE</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// minCapacity is usually close to size, so this is a win:</span>
        elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * The maximum size of array to allocate.
     * Some VMs reserve some header words in an array.
     * Attempts to allocate larger arrays may result in
     * OutOfMemoryError: Requested array size exceeds VM limit
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_ARRAY_SIZE</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span>

 <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>minCapacity <span class="token operator">&gt;</span> <span class="token constant">MAX_ARRAY_SIZE</span><span class="token punctuation">)</span> <span class="token operator">?</span>
            <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">:</span>
            <span class="token constant">MAX_ARRAY_SIZE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyOf</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span> newLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">copyOf</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> newLength<span class="token punctuation">,</span> original<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyOf</span><span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">[</span><span class="token punctuation">]</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span> newLength<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> newType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
        <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> copy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span>newType <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
            <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newLength<span class="token punctuation">]</span>
            <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>newType<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> copy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
                         <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>length<span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> copy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment">//\u6CE8\u610F\u4E86\uFF0C\u590D\u5236\u5230\u65B0\u6570\u7EC4\u662F\u4E00\u4E2A\u672C\u5730\u65B9\u6CD5</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">arraycopy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> src<span class="token punctuation">,</span>  <span class="token keyword">int</span>  srcPos<span class="token punctuation">,</span>
                                        <span class="token class-name">Object</span> dest<span class="token punctuation">,</span> <span class="token keyword">int</span> destPos<span class="token punctuation">,</span>
                                        <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>add\u4E00\u4E2A\u5143\u7D20\uFF0C\u4F1A\u786E\u8BA4\u5BB9\u91CF</li><li>\u786E\u8BA4\u5BB9\u91CF\u7684\u65F6\u5019\u4F1A\u6BD4\u8F83\u662F\u5426\u6BD4\u521D\u59CB\u5316\u6570\u7EC4\u5927</li><li>\u7CBE\u51C6\u786E\u8BA4\u5BB9\u91CF\u7684\u65F6\u5019\u4F1A\u5224\u65AD\u662F\u5426\u5927\u4E8E\u6570\u7EC4\u5BB9\u91CF\uFF0C\u82E5\u5927\u4E8E\u5219\u6269\u5BB9\uFF0C\u4E14\u4E00\u5B9A\u4F1AmodCount++\uFF0C\u7528\u6765fail-fast</li><li>\u901A\u8FC7\u4F4D\u8FD0\u7B97\uFF0C\u8BA1\u7B971.5\u500D\u539F\u6570\u7EC4\u5927\u5C0F\uFF0C\u518D\u786E\u8BA4\u662F\u5426\u5927\u4E8E\u6700\u5927\u6570\u7EC4\u5BB9\u91CF\uFF0C\u5982\u679C\u5927\u4E8E\uFF0C\u5219\u8D4B\u503C\u4E3AInterger\u7684\u6700\u5927\u503C</li><li>\u8D4B\u503C\u5230\u65B0\u6570\u7EC4\u7684\u65F6\u5019\uFF0C\u662F\u901A\u8FC7System.arraycopy\u8FD9\u4E2A\u672C\u5730\u65B9\u6CD5\u64CD\u4F5C\u7684</li></ol><h2 id="\u804A\u4E00\u804Ahashmap" tabindex="-1"><a class="header-anchor" href="#\u804A\u4E00\u804Ahashmap" aria-hidden="true">#</a> \u804A\u4E00\u804AHashMap</h2><p><img src="https://raw.githubusercontent.com/huluhutu/blogimg/main/img/image-20221015083820197.png" alt="image-20221015083820197" loading="lazy"></p><h3 id="hashmap\u7684\u6570\u636E\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#hashmap\u7684\u6570\u636E\u7ED3\u6784" aria-hidden="true">#</a> <strong>HashMap\u7684\u6570\u636E\u7ED3\u6784</strong></h3><ul><li>\u5728JDK1.7 \u4E2D\uFF0C\u7531\u201C\u6570\u7EC4+\u94FE\u8868\u201D\u7EC4\u6210\uFF0C\u6570\u7EC4\u662F HashMap \u7684\u4E3B\u4F53\uFF0C\u94FE\u8868\u5219\u662F\u4E3B\u8981\u4E3A\u4E86\u89E3\u51B3\u54C8\u5E0C\u51B2\u7A81\u800C\u5B58\u5728 \u7684\u3002</li><li>\u5728JDK1.8 \u4E2D\uFF0C\u7531\u201C\u6570\u7EC4+\u94FE\u8868+\u7EA2\u9ED1\u6811\u201D\u7EC4\u6210\u3002\u5F53\u94FE\u8868\u8FC7\u957F\uFF0C\u5219\u4F1A\u4E25\u91CD\u5F71\u54CD HashMap \u7684\u6027\u80FD\uFF0C\u7EA2\u9ED1\u6811\u641C\u7D22 \u65F6\u95F4\u590D\u6742\u5EA6\u662F O(logn)\uFF0C\u800C\u94FE\u8868\u662F\u7CDF\u7CD5\u7684 O(n)\u3002\u56E0\u6B64\uFF0CJDK1.8 \u5BF9\u6570\u636E\u7ED3\u6784\u505A\u4E86\u8FDB\u4E00\u6B65\u7684\u4F18\u5316\uFF0C\u5F15\u5165\u4E86\u7EA2 \u9ED1\u6811\uFF0C\u94FE\u8868\u548C\u7EA2\u9ED1\u6811\u5728\u8FBE\u5230\u4E00\u5B9A\u6761\u4EF6\u4F1A\u8FDB\u884C\u8F6C\u6362\uFF1A <ul><li>\u5F53\u94FE\u8868\u8D85\u8FC7 8 \u4E14\u6570\u636E\u603B\u91CF\u8D85\u8FC7 64 \u624D\u4F1A\u8F6C\u7EA2\u9ED1\u6811\u3002 53\u5C06\u94FE\u8868\u8F6C\u6362\u6210\u7EA2\u9ED1\u6811\u524D\u4F1A\u5224\u65AD\uFF0C\u5982\u679C\u5F53\u524D\u6570\u7EC4\u7684\u957F\u5EA6\u5C0F\u4E8E 64\uFF0C\u90A3\u4E48\u4F1A\u9009\u62E9\u5148\u8FDB\u884C\u6570\u7EC4\u6269\u5BB9\uFF0C\u800C\u4E0D \u662F\u8F6C\u6362\u4E3A\u7EA2\u9ED1\u6811\uFF0C\u4EE5\u51CF\u5C11\u641C\u7D22\u65F6\u95F4</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/huluhutu/blogimg/main/img/image-20221015084212277.png" alt="image-20221015084212277" loading="lazy"></p><p>\u5176\u4E2D\uFF0C\u6876\u6570\u7EC4\u662F\u7528\u6765\u5B58\u50A8\u6570\u636E\u5143\u7D20\uFF0C\u94FE\u8868\u662F\u7528\u6765\u89E3\u51B3\u51B2\u7A81\uFF0C\u7EA2\u9ED1\u6811\u662F\u4E3A\u4E86\u63D0\u9AD8\u67E5\u8BE2\u7684\u6548\u7387\u3002</p><ul><li>\u6570\u636E\u5143\u7D20\u901A\u8FC7\u6620\u5C04\u5173\u7CFB\uFF0C\u4E5F\u5C31\u662F\u6563\u5217\u51FD\u6570\uFF0C\u6620\u5C04\u5230\u6876\u6570\u7EC4\u5BF9\u5E94\u7D22\u5F15\u7684\u4F4D\u7F6E</li><li>\u5982\u679C\u53D1\u751F\u51B2\u7A81\uFF0C\u4ECE\u51B2\u7A81\u7684\u4F4D\u7F6E\u62C9\u4E00\u4E2A\u94FE\u8868\uFF0C\u63D2\u5165\u51B2\u7A81\u7684\u5143\u7D20</li><li>\u5982\u679C\u94FE\u8868\u957F\u5EA6&gt;8&amp;\u6570\u7EC4\u5927\u5C0F&gt;=64\uFF0C\u94FE\u8868\u8F6C\u4E3A\u7EA2\u9ED1\u6811</li><li>\u5982\u679C\u7EA2\u9ED1\u6811\u8282\u70B9\u4E2A\u6570&lt;6 \uFF0C\u8F6C\u4E3A\u94FE\u8868</li></ul><h3 id="put\u6D41\u7A0B" tabindex="-1"><a class="header-anchor" href="#put\u6D41\u7A0B" aria-hidden="true">#</a> <strong>put\u6D41\u7A0B</strong></h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token comment">//\u8BA1\u7B97\u51FAhashCode\uFF08\u6270\u52A8\u51FD\u6570\uFF09</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> h<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * Implements Map.put and related methods.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">hash</span> hash for key
     * <span class="token keyword">@param</span> <span class="token parameter">key</span> the key
     * <span class="token keyword">@param</span> <span class="token parameter">value</span> the value to put
     * <span class="token keyword">@param</span> <span class="token parameter">onlyIfAbsent</span> if true, don&#39;t change existing value
     * <span class="token keyword">@param</span> <span class="token parameter">evict</span> if false, the table is in creation mode.
     * <span class="token keyword">@return</span> previous value, or null if none
     */</span>
<span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>
                   <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                e <span class="token operator">=</span> p<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>
                            <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// existing mapping for key</span>
                <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
                <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span>
            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/huluhutu/blogimg/main/img/image-20221015085235448.png" alt="image-20221015085235448" loading="lazy"></p><ul><li>\u9996\u5148\u8FDB\u884C\u54C8\u5E0C\u503C\u7684\u6270\u52A8\uFF0C\u83B7\u53D6\u4E00\u4E2A\u65B0\u7684\u54C8\u5E0C\u503C\u3002 (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</li><li>\u5224\u65ADtab\u662F\u5426\u4F4D\u7A7A\u6216\u8005\u957F\u5EA6\u4E3A0\uFF0C\u5982\u679C\u662F\u5219\u8FDB\u884C\u6269\u5BB9\u64CD\u4F5C\u3002</li><li><code>if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length;</code></li><li>\u6839\u636E\u54C8\u5E0C\u503C\u8BA1\u7B97\u4E0B\u6807\uFF0C\u5982\u679C\u5BF9\u5E94\u5C0F\u6807\u6B63\u597D\u6CA1\u6709\u5B58\u653E\u6570\u636E\uFF0C\u5219\u76F4\u63A5\u63D2\u5165\u5373\u53EF\u5426\u5219\u9700 \u8981\u8986\u76D6\u3002 tab[i = (n - 1) &amp; hash])</li><li>\u5224\u65ADtab[i]\u662F\u5426\u4E3A\u6811\u8282\u70B9\uFF0C\u5426\u5219\u5411\u94FE\u8868\u4E2D\u63D2\u5165\u6570\u636E\uFF0C\u662F\u5219\u5411\u6811\u4E2D\u63D2\u5165\u8282\u70B9\u3002 5. \u5982\u679C\u94FE\u8868\u4E2D\u63D2\u5165\u8282\u70B9\u7684\u65F6\u5019\uFF0C\u94FE\u8868\u957F\u5EA6\u5927\u4E8E\u7B49\u4E8E8\uFF0C\u5219\u9700\u8981\u628A\u94FE\u8868\u8F6C\u6362\u4E3A\u7EA2\u9ED1 \u6811\u3002 treeifyBin(tab, hash);</li><li>\u6700\u540E\u6240\u6709\u5143\u7D20\u5904\u7406\u5B8C\u6210\u540E\uFF0C\u5224\u65AD\u662F\u5426\u8D85\u8FC7\u9608\u503C\uFF1B threshold \uFF0C\u8D85\u8FC7\u5219\u6269\u5BB9\u3002</li></ul><h3 id="get\u6D41\u7A0B" tabindex="-1"><a class="header-anchor" href="#get\u6D41\u7A0B" aria-hidden="true">#</a> <strong>get\u6D41\u7A0B</strong></h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

 <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> e<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span>first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token comment">// always check first node</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> first<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">do</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token keyword">return</span> e<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/huluhutu/blogimg/main/img/image-20221015085939283.png" alt="image-20221015085939283" loading="lazy"></p><p>HashMap\u7684\u67E5\u627E\u5C31\u7B80\u5355\u5F88\u591A\uFF1A</p><ol><li>\u4F7F\u7528\u6270\u52A8\u51FD\u6570\uFF0C\u83B7\u53D6\u65B0\u7684\u54C8\u5E0C\u503C</li><li>\u8BA1\u7B97\u6570\u7EC4\u4E0B\u6807\uFF0C\u83B7\u53D6\u8282\u70B9</li><li>\u5F53\u524D\u8282\u70B9\u548Ckey\u5339\u914D\uFF0C\u76F4\u63A5\u8FD4\u56DE</li><li>\u5426\u5219\uFF0C\u5F53\u524D\u8282\u70B9\u662F\u5426\u4E3A\u6811\u8282\u70B9\uFF0C\u67E5\u627E\u7EA2\u9ED1\u6811</li><li>\u5426\u5219\uFF0C\u904D\u5386\u94FE\u8868\u67E5\u627E</li></ol><h3 id="hashmap\u7684\u6270\u52A8\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#hashmap\u7684\u6270\u52A8\u51FD\u6570" aria-hidden="true">#</a> <strong>HashMap\u7684\u6270\u52A8\u51FD\u6570</strong></h3><p>HashMap\u7684\u54C8\u5E0C\u51FD\u6570\u662F\u5148\u62FF\u5230 key \u7684hashcode\uFF0C\u662F\u4E00\u4E2A32\u4F4D\u7684int\u7C7B\u578B\u7684\u6570\u503C\uFF0C\u7136\u540E\u8BA9 hashcode\u7684\u9AD816\u4F4D\u548C\u4F4E16\u4F4D\u8FDB\u884C\u5F02\u6216\u64CD\u4F5C\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//\u8BA1\u7B97\u51FAhashCode\uFF08\u6270\u52A8\u51FD\u6570\uFF09</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> h<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u56E0\u4E3A key.hashCode() \u51FD\u6570\u8C03\u7528\u7684\u662F key \u952E\u503C\u7C7B\u578B\u81EA\u5E26\u7684\u54C8\u5E0C\u51FD\u6570\uFF0C\u8FD4\u56DE int \u578B\u6563\u5217 \u503C\u3002int \u503C\u8303\u56F4\u4E3A -2147483648~2147483647\uFF0C\u52A0\u8D77\u6765\u5927\u6982 40 \u4EBF\u7684\u6620\u5C04\u7A7A\u95F4\u3002</p><p>\u53EA\u8981\u54C8\u5E0C\u51FD\u6570\u6620\u5C04\u5F97\u6BD4\u8F83\u5747\u5300\u677E\u6563\uFF0C\u4E00\u822C\u5E94\u7528\u662F\u5F88\u96BE\u51FA\u73B0\u78B0\u649E\u7684\u3002\u4F46\u95EE\u9898\u662F\u4E00\u4E2A 40 \u4EBF\u957F\u5EA6\u7684\u6570\u7EC4\uFF0C\u5185\u5B58\u662F\u653E\u4E0D\u4E0B\u7684\u3002</p><p>\u5047\u5982 HashMap \u6570\u7EC4\u7684\u521D\u59CB\u5927\u5C0F\u624D 16\uFF0C\u5C31\u9700\u8981\u7528\u4E4B\u524D\u9700\u8981\u5BF9\u6570\u7EC4\u7684\u957F\u5EA6\u53D6\u6A21\u8FD0\u7B97\uFF0C\u5F97 \u5230\u7684\u4F59\u6570\u624D\u80FD\u7528\u6765\u8BBF\u95EE\u6570\u7EC4\u4E0B\u6807\u3002</p><p>\u6E90\u7801\u4E2D\u6A21\u8FD0\u7B97\u5C31\u662F\u628A\u6563\u5217\u503C\u548C\u6570\u7EC4\u957F\u5EA6 - 1 \u505A\u4E00\u4E2A &quot; \u4E0E&amp; &quot; \u64CD\u4F5C\uFF0C\u4F4D\u8FD0\u7B97\u6BD4\u53D6\u4F59 % \u8FD0 \u7B97\u8981\u5FEB\u3002</p><p>\u6240\u4EE5\u6570\u7EC4\u5927\u5C0F\u5FC5\u987B\u4E3A2\u7684\u6574\u6570\u500D\u3002</p><p>\u6270\u52A8\u51FD\u6570\u5F0F\u4E3A\u4E86\u589E\u52A0\u5206\u5E03\u968F\u673A\u6027\u4E14\u53C8\u4FDD\u7559\u539F\u6709\u6570\u636E\u7684\u7279\u5F81\u800C\u8BBE\u8BA1\u7684</p><p><img src="https://raw.githubusercontent.com/huluhutu/blogimg/main/img/image-20221015090651894.png" alt="image-20221015090651894" loading="lazy"></p><p>\u53F3\u79FB 16 \u4F4D\uFF0C\u6B63\u597D\u662F 32bit \u7684\u4E00\u534A\uFF0C\u81EA\u5DF1\u7684\u9AD8\u534A\u533A\u548C\u4F4E\u534A\u533A\u505A\u5F02\u6216\uFF0C\u5C31\u662F\u4E3A\u4E86\u6DF7\u5408\u539F \u59CB\u54C8\u5E0C\u7801\u7684\u9AD8\u4F4D\u548C\u4F4E\u4F4D\uFF0C\u4EE5\u6B64\u6765\u52A0\u5927\u4F4E\u4F4D\u7684\u968F\u673A\u6027\u3002\u800C\u4E14\u6DF7\u5408\u540E\u7684\u4F4E\u4F4D\u63BA\u6742\u4E86\u9AD8\u4F4D \u7684\u90E8\u5206\u7279\u5F81\uFF0C\u8FD9\u6837\u9AD8\u4F4D\u7684\u4FE1\u606F\u4E5F\u88AB\u53D8\u76F8\u4FDD\u7559\u4E0B\u6765\u3002</p><h3 id="\u521D\u59CB\u5316hashmap\u521D\u59CB\u5BB9\u91CF\u53C2\u6570\u4E3A17\u65F6" tabindex="-1"><a class="header-anchor" href="#\u521D\u59CB\u5316hashmap\u521D\u59CB\u5BB9\u91CF\u53C2\u6570\u4E3A17\u65F6" aria-hidden="true">#</a> <strong>\u521D\u59CB\u5316HashMap\u521D\u59CB\u5BB9\u91CF\u53C2\u6570\u4E3A17\u65F6</strong></h3><p>\u7B80\u5355\u6765\u8BF4\uFF0C\u5C31\u662F\u521D\u59CB\u5316\u65F6\uFF0C\u4F20\u7684\u4E0D\u662F2\u7684\u500D\u6570\u65F6\uFF0CHashMap\u4F1A\u5411\u4E0A\u5BFB\u627E\u79BB\u5F97\u6700\u8FD1\u76842\u7684 \u500D\u6570\uFF0C\u6240\u4EE5\u4F20\u516517\uFF0C\u4F46HashMap\u7684\u5B9E\u9645\u5BB9\u91CF\u662F32\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal initial capacity: &quot;</span> <span class="token operator">+</span>
                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span>
            initialCapacity <span class="token operator">=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal load factor: &quot;</span> <span class="token operator">+</span>
                                               loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Returns a power of two size for the given target capacity.
     */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
        n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
        n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
        n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MAXIMUM_CAPACITY = 1 &lt;&lt; 30\uFF0C\u8FD9\u4E2A\u662F\u4E34\u754C\u8303\u56F4\uFF0C\u4E5F\u5C31\u662F\u6700\u2F24\u7684Map\u96C6\u5408\u3002 \u8BA1\u7B97\u8FC7\u7A0B\u662F\u5411\u53F3\u79FB\u4F4D1\u30012\u30014\u30018\u300116\uFF0C\u548C\u539F\u6765\u7684\u6570\u505A | \u8FD0\u7B97\uFF0C\u8FD9\u4E3B\u8981\u662F\u4E3A\u4E86\u628A \u2F06\u8FDB\u5236\u7684\u5404\u4E2A\u4F4D\u7F6E\u90FD\u586B\u4E0A1\uFF0C\u5F53\u2F06\u8FDB\u5236\u7684\u5404\u4E2A\u4F4D\u7F6E\u90FD\u662F1\u4EE5\u540E\uFF0C\u5C31\u662F\u2F00\u4E2A\u6807\u51C6\u76842 \u7684\u500D\u6570\u51CF1\u4E86\uFF0C\u6700\u540E\u628A\u7ED3\u679C\u52A01\u518D\u8FD4\u56DE\u5373\u53EF\u3002</p><h3 id="jdk8\u5BF9hashmap\u7684\u6539\u8FDB" tabindex="-1"><a class="header-anchor" href="#jdk8\u5BF9hashmap\u7684\u6539\u8FDB" aria-hidden="true">#</a> <strong>JDK8\u5BF9HashMap\u7684\u6539\u8FDB</strong></h3><ol><li><code>\u6570\u636E\u7ED3\u6784</code>\uFF1A\u6570\u7EC4 + \u94FE\u8868\u6539\u6210\u4E86\u6570\u7EC4 + \u94FE\u8868\u6216\u7EA2\u9ED1\u6811 \u539F\u56E0\uFF1A\u53D1\u751F hash \u51B2\u7A81\uFF0C\u5143\u7D20\u4F1A\u5B58\u5165\u94FE\u8868\uFF0C\u94FE\u8868\u8FC7\u957F\u8F6C\u4E3A\u7EA2\u9ED1\u6811\uFF0C\u5C06\u65F6\u95F4\u590D\u6742\u5EA6 \u7531 O(n) \u964D\u4E3A O(logn)</li><li><code>\u94FE\u8868\u63D2\u5165\u65B9\u5F0F</code>\uFF1A\u94FE\u8868\u7684\u63D2\u5165\u65B9\u5F0F\u4ECE\u5934\u63D2\u6CD5\u6539\u6210\u4E86\u5C3E\u63D2\u6CD5 \u7B80\u5355\u8BF4\u5C31\u662F\u63D2\u5165\u65F6\uFF0C\u5982\u679C\u6570\u7EC4\u4F4D\u7F6E\u4E0A\u5DF2\u7ECF\u6709\u5143\u7D20\uFF0C<strong>1.7 \u5C06\u65B0\u5143\u7D20\u653E\u5230\u6570\u7EC4\u4E2D\uFF0C\u539F\u59CB\u8282\u70B9\u4F5C\u4E3A\u65B0\u8282\u70B9\u7684\u540E\u7EE7\u8282\u70B9\uFF0C1.8 \u904D\u5386\u94FE\u8868\uFF0C\u5C06\u5143\u7D20\u653E\u7F6E\u5230\u94FE\u8868\u7684\u6700\u540E</strong>\u3002 \u539F\u56E0\uFF1A\u56E0\u4E3A 1.7 \u5934\u63D2\u6CD5\u6269\u5BB9\u65F6\uFF0C\u5934\u63D2\u6CD5\u4F1A\u4F7F\u94FE\u8868\u53D1\u751F\u53CD\u8F6C\uFF0C\u591A\u7EBF\u7A0B\u73AF\u5883\u4E0B\u4F1A\u4EA7\u751F\u73AF\u3002</li><li><code>\u6269\u5BB9rehash</code>\uFF1A\u6269\u5BB9\u7684\u65F6\u5019 1.7 \u9700\u8981\u5BF9\u539F\u6570\u7EC4\u4E2D\u7684\u5143\u7D20\u8FDB\u884C\u91CD\u65B0 hash \u5B9A\u4F4D\u5728\u65B0\u6570\u7EC4\u7684\u4F4D\u7F6E\uFF0C1.8 \u91C7\u7528\u66F4\u7B80\u5355\u7684\u5224\u65AD\u903B\u8F91\uFF0C\u4E0D\u9700\u8981\u91CD\u65B0\u901A\u8FC7\u54C8\u5E0C\u51FD\u6570\u8BA1\u7B97\u4F4D\u7F6E\uFF0C\u65B0\u7684\u4F4D\u7F6E\u4E0D\u53D8\u6216\u7D22\u5F15 + \u65E7\u7684\u6570\u7EC4\u5BB9\u91CF\u5927\u5C0F\u3002 \u539F\u56E0\uFF1A\u63D0\u9AD8\u6269\u5BB9\u7684\u6548\u7387\uFF0C\u66F4\u5FEB\u5730\u6269\u5BB9\u3002</li><li><code>\u6269\u5BB9\u65F6\u673A</code>\uFF1A\u5728\u63D2\u5165\u65F6\uFF0C1.7 \u5148\u5224\u65AD\u662F\u5426\u9700\u8981\u6269\u5BB9\uFF0C\u518D\u63D2\u5165\uFF0C1.8 \u5148\u8FDB\u884C\u63D2\u5165\uFF0C\u63D2 \u5165\u5B8C\u6210\u518D\u5224\u65AD\u662F\u5426\u9700\u8981\u6269\u5BB9\uFF1B</li><li><code>\u6563\u5217\u51FD\u6570</code>\uFF1A1.7 \u505A\u4E86\u56DB\u6B21\u79FB\u4F4D\u548C\u56DB\u6B21\u5F02\u6216\uFF0Cjdk1.8\u53EA\u505A\u4E00\u6B21\u3002 \u539F\u56E0\uFF1A\u505A 4 \u6B21\u7684\u8BDD\uFF0C\u8FB9\u9645\u6548\u7528\u4E5F\u4E0D\u5927\uFF0C\u6539\u4E3A\u4E00\u6B21\uFF0C\u63D0\u5347\u6548\u7387\u3002</li></ol><h2 id="concurrenthashmap" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap" aria-hidden="true">#</a> ConcurrentHashMap</h2><p>ConcurrentHashmap\u7EBF\u7A0B\u5B89\u5168\u5728jdk1.7\u7248\u672C\u662F\u57FA\u4E8E\u5206\u6BB5\u9501\u5B9E\u73B0\uFF0C\u5728jdk1.8\u662F\u57FA\u4E8E<code>CAS+synchronized</code> \u5B9E\u73B0\u3002</p><h3 id="_1-7\u5206\u6BB5\u9501" tabindex="-1"><a class="header-anchor" href="#_1-7\u5206\u6BB5\u9501" aria-hidden="true">#</a> 1.7\u5206\u6BB5\u9501</h3><p>\u4ECE\u7ED3\u6784\u4E0A\u8BF4\uFF0C1.7\u7248\u672C\u7684ConcurrentHashMap\u91C7\u7528\u5206\u6BB5\u9501\u673A\u5236\uFF0C\u91CC\u9762\u5305\u542B\u4E00\u4E2ASegment \u6570\u7EC4\uFF0CSegment\u7EE7\u627F\u4E8EReentrantLock\uFF0CSegment\u5219\u5305\u542BHashEntry\u7684\u6570\u7EC4\uFF0CHashEntry\u672C \u8EAB\u5C31\u662F\u4E00\u4E2A\u94FE\u8868\u7684\u7ED3\u6784\uFF0C\u5177\u6709\u4FDD\u5B58key\u3001value\u7684\u80FD\u529B\u80FD\u6307\u5411\u4E0B\u4E00\u4E2A\u8282\u70B9\u7684\u6307\u9488\u3002 \u5B9E\u9645\u4E0A\u5C31\u662F\u76F8\u5F53\u4E8E\u6BCF\u4E2ASegment\u90FD\u662F\u4E00\u4E2AHashMap\uFF0C\u9ED8\u8BA4\u7684Segment\u957F\u5EA6\u662F16\uFF0C\u4E5F\u5C31 \u662F\u652F\u630116\u4E2A\u7EBF\u7A0B\u7684\u5E76\u53D1\u5199\uFF0CSegment\u4E4B\u95F4\u76F8\u4E92\u4E0D\u4F1A\u53D7\u5230\u5F71\u54CD\u3002</p><p><img src="https://raw.githubusercontent.com/huluhutu/blogimg/main/img/image-20221015094619562.png" alt="image-20221015094619562" loading="lazy"></p><p><strong>put\u6D41\u7A0B</strong> \u6574\u4E2A\u6D41\u7A0B\u548CHashMap\u975E\u5E38\u7C7B\u4F3C\uFF0C\u53EA\u4E0D\u8FC7\u662F\u5148\u5B9A\u4F4D\u5230\u5177\u4F53\u7684Segment\uFF0C\u7136\u540E\u901A\u8FC7 ReentrantLock\u53BB\u64CD\u4F5C\u800C\u5DF2\uFF0C\u540E\u9762\u7684\u6D41\u7A0B\uFF0C\u5C31\u548CHashMap\u57FA\u672C\u4E0A\u662F\u4E00\u6837\u7684\u3002</p><ol><li>\u8BA1\u7B97hash\uFF0C\u5B9A\u4F4D\u5230segment\uFF0Csegment\u5982\u679C\u662F\u7A7A\u5C31\u5148\u521D\u59CB\u5316 2. \u4F7F\u7528ReentrantLock\u52A0\u9501\uFF0C\u5982\u679C\u83B7\u53D6\u9501\u5931\u8D25\u5219\u5C1D\u8BD5\u81EA\u65CB\uFF0C\u81EA\u65CB\u8D85\u8FC7\u6B21\u6570\u5C31\u963B\u585E\u83B7 \u53D6\uFF0C\u4FDD\u8BC1\u4E00\u5B9A\u83B7\u53D6\u9501\u6210\u529F</li><li>\u904D\u5386HashEntry\uFF0C\u5C31\u662F\u548CHashMap\u4E00\u6837\uFF0C\u6570\u7EC4\u4E2Dkey\u548Chash\u4E00\u6837\u5C31\u76F4\u63A5\u66FF\u6362\uFF0C\u4E0D\u5B58 \u5728\u5C31\u518D\u63D2\u5165\u94FE\u8868\uFF0C\u94FE\u8868\u540C\u6837\u64CD\u4F5C</li></ol><p><strong>get\u6D41\u7A0B</strong> get\u4E5F\u5F88\u7B80\u5355\uFF0Ckey\u901A\u8FC7hash\u5B9A\u4F4D\u5230segment\uFF0C\u518D\u904D\u5386\u94FE\u8868\u5B9A\u4F4D\u5230\u5177\u4F53\u7684\u5143\u7D20\u4E0A\uFF0C\u9700\u8981 \u6CE8\u610F\u7684\u662Fvalue\u662Fvolatile\u7684\uFF0C\u6240\u4EE5get\u662F\u4E0D\u9700\u8981\u52A0\u9501\u7684\u3002</p><h3 id="_1-8cas-synchronized" tabindex="-1"><a class="header-anchor" href="#_1-8cas-synchronized" aria-hidden="true">#</a> 1.8CAS+Synchronized</h3><p>jdk1.8\u5B9E\u73B0\u7EBF\u7A0B\u5B89\u5168\u4E0D\u662F\u5728\u6570\u636E\u7ED3\u6784\u4E0A\u4E0B\u529F\u592B\uFF0C\u5B83\u7684\u6570\u636E\u7ED3\u6784\u548CHashMap\u662F\u4E00\u6837\u7684\uFF0C \u6570\u7EC4+\u94FE\u8868+\u7EA2\u9ED1\u6811\u3002\u5B83\u5B9E\u73B0\u7EBF\u7A0B\u5B89\u5168\u7684\u5173\u952E\u70B9\u5728\u4E8Eput\u6D41\u7A0B\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span>
            <span class="token comment">//\u5982\u679Ctable\u4E3A\u7A7A\u6216\u65E0\u503C\uFF0C\u521D\u59CB\u5316table</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
                             <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token comment">// no lock when adding to empty bin</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MOVED</span><span class="token punctuation">)</span>
                tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">V</span> oldVal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            binCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token class-name">K</span> ek<span class="token punctuation">;</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                                    <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>
                                     <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    oldVal <span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
                                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>
                                        e<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>
                                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> pred <span class="token operator">=</span> e<span class="token punctuation">;</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    pred<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>
                                                              value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span>
                            binCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>
                                                           value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                oldVal <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>
                                    p<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> <span class="token constant">TREEIFY_THRESHOLD</span><span class="token punctuation">)</span>
                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVal <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                        <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * Table initialization and resizing control.  When negative, the
     * table is being initialized or resized: -1 for initialization,
     * else -(1 + the number of active resizing threads).  Otherwise,
     * when table is null, holds the initial table size to use upon
     * creation, or 0 for default. After initialization, holds the
     * next element count value upon which to resize the table.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> sizeCtl<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_CAPACITY</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
<span class="token comment">//\u521D\u59CB\u5316table</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lost initialization race; just spin</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>sc <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> sc <span class="token operator">:</span> <span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">;</span>
                        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        table <span class="token operator">=</span> tab <span class="token operator">=</span> nt<span class="token punctuation">;</span>
                        sc <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    sizeCtl <span class="token operator">=</span> sc<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> tab<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u5148\u8BA1\u7B97hash\uFF0C\u5224\u65ADtable\u662F\u5426\u5B58\u5728\u6216\u957F\u5EA6\u662F\u5426\u4E3A0\uFF0C\u5982\u679C\u662F\uFF0C\u5219\u521D\u59CB\u5316table <ul><li>\u6CE8\u610F\uFF1A\u6709\u4E2Avolatile\u53D8\u91CFsizeCtl\u8D4B\u503C\u7ED9sc\uFF0C\u7528\u6765\u8868\u793A\u662F\u5426\u5DF2\u5728\u521D\u59CB\u5316\u6216\u8C03\u6574\u5927\u5C0F\u4E2D\uFF0C\u5982\u679C\u6709\uFF0C\u503C\u4E3A-1\uFF1B</li><li>\u5982\u679C\u4E0D\u662F\uFF0CCAS\u6210\u529F\u8C03sc\u5230-1\uFF0C\u7136\u540E\u518D\u5224\u65AD\u4E00\u6B21table\u72B6\u6001\uFF0C\u4EE5\u9632\u591A\u7EBF\u7A0B\u4E0D\u5B89\u5168\uFF0C</li><li>\u7136\u540E\u6784\u5EFAsc\u5927\u5C0F\u7684\u8282\u70B9\u6570\u7EC4\uFF0C\u8D4B\u503C\u7ED9table\uFF0C\u7136\u540Esc\u8C03\u52300.75\u5927\u5C0F\u8D4B\u503C\u7ED9sizeCtl</li></ul></li><li>\u5982\u679C\u5F53\u524D\u6570\u7EC4\u4F4D\u7F6E\u662F\u7A7A\u5219\u76F4\u63A5\u901A\u8FC7CAS\u81EA\u65CB\u5199\u5165\u6570\u636E</li><li>\u5982\u679Chash==MOVED\uFF0C\u8BF4\u660E\u9700\u8981\u6269\u5BB9\uFF0C\u6267\u884C\u6269\u5BB9</li><li>\u5982\u679C\u90FD\u4E0D\u6EE1\u8DB3\uFF0C\u5C31\u4F7F\u7528synchronized\u5199\u5165\u6570\u636E\uFF0C\u5199\u5165\u6570\u636E\u540C\u6837\u5224\u65AD\u94FE\u8868\u3001\u7EA2\u9ED1 \u6811\uFF0C\u94FE\u8868\u5199\u5165\u548CHashMap\u7684\u65B9\u5F0F\u4E00\u6837\uFF0Ckey hash\u4E00\u6837\u5C31\u8986\u76D6\uFF0C\u53CD\u4E4B\u5C31\u5C3E\u63D2\u6CD5\uFF0C\u94FE \u8868\u957F\u5EA6\u8D85\u8FC78\u5C31\u8F6C\u6362\u6210\u7EA2\u9ED1\u6811</li></ul><p><img src="https://raw.githubusercontent.com/huluhutu/blogimg/main/img/image-20221015134339985.png" alt="image-20221015134339985" loading="lazy"></p>`,60),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","2-Java\u96C6\u5408.html.vue"]]);export{r as default};
